diff --git a/README.md b/README.md
index d1a671d..21e0ee3 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,3 @@
-# git-ai
+# gaid
 
 A command line tool to automate git commits and PRs with AI.
diff --git a/gaid/commits.py b/gaid/commits.py
new file mode 100644
index 0000000..a741af2
--- /dev/null
+++ b/gaid/commits.py
@@ -0,0 +1,75 @@
+import subprocess
+
+from rich.progress import Progress, SpinnerColumn, TextColumn
+
+
+from gaid.config import Config
+from gaid.git import GitTarget, get_diffs
+from gaid.messages import print_error, print_success, print_warning
+from gaid.llm_client import LLMClient
+
+
+class Commits:
+
+    def get_commit_prompt(self, diff_output: str, max_chars) -> list[dict]:
+        """
+        Generates a commit prompt based on the given diff output.
+
+        Args:
+            diff_output (str): The diff output containing the list of changes.
+
+        Returns:
+            list: A list of dictionaries representing the commit prompt. Each dictionary has two keys:
+                - 'role': The role of the message (either 'system' or 'user').
+                - 'content': The content of the message.
+        """
+
+        if max_chars == 0:
+            max_chars = Config().get_option("max_chars")
+
+        return [
+            {
+                "role": "system",
+                "content": f"""
+                            You are a helpful agent that evaluates changes in repositories and summarizes them into a 
git commit message. 
+                            Given a list of changes, summarize all changes into a single, concise commit message that is
no more than {max_chars} characters.
+                            Ignore minor changes if needed to keep the message concise and within the character limit. 
+                            Only output the single git commit message.
+                            """,
+            },
+            {
+                "role": "user",
+                "content": f"""
+                            {diff_output}
+                            """,
+            },
+        ]
+
+    def get_commit_message(self, max_chars: int) -> str:
+        """
+        Retrieves the commit message for the changes made in the current branch.
+
+        Returns:
+            str: The generated commit message.
+        """
+        with Progress(
+            SpinnerColumn(),
+            TextColumn("{task.description}"),
+            transient=True,
+        ) as progress:
+            progress.add_task(description="Generating commit message...", total=None)
+
+            diff_output = get_diffs(GitTarget.COMMIT)
+
+            if diff_output == "":
+                return ""
+
+            # Generate commit message using a LLM
+            client = LLMClient()
+            prompt = self.get_commit_prompt(diff_output, max_chars)
+            response = client.prompt(prompt)
+
+            if response != "":
+                print_success("Commit message generated.")
+
+            return response
diff --git a/gaid/git.py b/gaid/git.py
new file mode 100644
index 0000000..631c6a1
--- /dev/null
+++ b/gaid/git.py
@@ -0,0 +1,105 @@
+import subprocess
+
+from enum import Enum
+
+from gaid.config import Config
+from gaid.messages import print_error, print_success, print_warning
+
+
+class GitTarget(Enum):
+    COMMIT = "commit"
+    PR = "pr"
+
+
+def create_commit(message):
+    """
+    Creates a new commit with the given message.
+
+    Args:
+        message (str): The commit message.
+    """
+    try:
+        subprocess.run(["git", "commit", "-m", message])
+        print_success("Committed successfully.")
+    except Exception as e:
+        print_error()
+
+
+def get_diffs(target: GitTarget, branch: str = "") -> str:
+    """
+    Retrieves the statistics of the changes made to the staged files in the git repository.
+
+    Returns:
+        A list of filenames of the staged files that have changes within the specified limit.
+        Returns None if there are no changes staged to commit or if an error occurs.
+    """
+    try:
+        config = Config()
+        default_branch = config.get_option("default_branch")
+        if target == GitTarget.COMMIT:
+            diff_stat = subprocess.run(
+                ["git", "diff", "--cached", "--stat"], capture_output=True, text=True
+            )
+        elif target == GitTarget.PR:
+            diff_stat = subprocess.run(
+                ["git", "diff", f"{default_branch}..{branch}", "--stat"],
+                capture_output=True,
+                text=True,
+            )
+
+        if "error: unknown option `cached'" in diff_stat.stderr:
+            print_error(
+                "Not a git repository. Please initialize a git repository and try again."
+            )
+            return None
+
+        if diff_stat.returncode == 0:
+            diff_output = diff_stat.stdout
+
+            # Empty diff output means no changes staged to commit
+            if not diff_output:
+                print_error("No changes staged to commit.")
+                return None
+        else:
+            return None
+
+        files_within_limit = []
+        max_changes = int(Config().get_option("max_changes"))
+
+        # Parse diff output to get filenames and changes
+        for line in diff_output.splitlines():
+            parts = line.split("|")
+            if len(parts) == 2:
+                filename = parts[0].strip()
+                changes = parts[1].strip().split()[0]
+                if changes.isdigit() and int(changes) <= max_changes:
+                    files_within_limit.append(filename)
+                else:
+                    print_warning(
+                        f"File {filename} has {changes} changes. Skipping file in LLM summary."
+                    )
+
+        diff_output = ""
+        for file in files_within_limit:
+            if target == GitTarget.COMMIT:
+                diff = subprocess.run(
+                    ["git", "diff", "--cached", file],
+                    capture_output=True,
+                    text=True,
+                )
+            elif target == GitTarget.PR:
+                diff = subprocess.run(
+                    ["git", "diff", f"{default_branch}..{branch}", "--", file],
+                    capture_output=True,
+                    text=True,
+                )
+            diff_output += diff.stdout
+
+        return diff_output
+
+    except Exception as e:
+        if "No such file or directory: 'git'" in str(e):
+            print_error("Git is not installed. Please install git and try again.")
+        else:
+            print_error()
+        return None
diff --git a/gaid/pull_requests.py b/gaid/pull_requests.py
new file mode 100644
index 0000000..1221832
--- /dev/null
+++ b/gaid/pull_requests.py
@@ -0,0 +1,51 @@
+from rich.progress import Progress, SpinnerColumn, TextColumn
+
+
+class PullRequests:
+
+    def get_pr_prompt(self, diff_output: str):
+        """
+        Generate a pull request prompt based on the given diff output.
+        """
+        return [
+            {
+                "role": "system",
+                "content": f"""
+                            You are a helpful agent that evaluates changes in repository branches and summarizes them 
into a pull request. 
+                            Given a list of changes, fill out the following pull request template with the necessary 
information. 
+                            Instructions for each section are between the '<>' brackets. 
+                            You can use markdown to format your message.
+                            Prioritize the most important changes and keep the message as concise as possible.
+                            Only return the filled-out pull request template with no additional information.
+
+                            Title: <concise pull request title summarizing key changes>
+                            <1-3 sentence summary of the pull request, highlighting major changes concisely>
+
+                            ### Key Changes:
+                            - <bulleted list of major changes, skipping minor changes or changes from dependencies>
+
+                            ### Further Improvements:
+                            - <a short list of potential future improvements>
+                            """,
+            },
+            {
+                "role": "user",
+                "content": f"""
+                            {diff_output}
+                            """,
+            },
+        ]
+
+    def get_pr(self) -> str:
+        """
+        Generate a pull request based on the changes made in the current branch.
+
+        Returns:
+            str: The generated pull request
+        """
+        with Progress(
+            SpinnerColumn(),
+            TextColumn("{task.description}"),
+            transient=True,
+        ) as progress:
+            pass
diff --git a/git_ai/commits.py b/git_ai/commits.py
deleted file mode 100644
index 27cd384..0000000
--- a/git_ai/commits.py
+++ /dev/null
@@ -1,162 +0,0 @@
-import subprocess
-
-from rich.progress import Progress, SpinnerColumn, TextColumn
-
-
-from git_ai.config import Config
-from git_ai.messages import print_error, print_success, print_warning
-from git_ai.llm_client import LLMClient
-
-
-class Commits:
-
-    def get_commit_prompt(self, diff_output: str, max_chars) -> list[dict]:
-        """
-        Generates a commit prompt based on the given diff output.
-
-        Args:
-            diff_output (str): The diff output containing the list of changes.
-
-        Returns:
-            list: A list of dictionaries representing the commit prompt. Each dictionary has two keys:
-                - 'role': The role of the message (either 'system' or 'user').
-                - 'content': The content of the message.
-        """
-
-        if max_chars == 0:
-            max_chars = Config().get_option("max_chars")
-
-        return [
-            {
-                "role": "system",
-                "content": f"""
-                            You are a helpful agent that evaluates changes in repositories and summarizes them into a 
git commit message. 
-                            Given a list of changes, summarize all changes into a single, concise commit message that is
no more than {max_chars} characters.
-                            Ignore minor changes if needed to keep the message concise and within the character limit. 
-                            Only output the single git commit message.
-                            """,
-            },
-            {
-                "role": "user",
-                "content": f"""
-                            {diff_output}
-                            """,
-            },
-        ]
-
-    def get_commit_message(self, max_chars: int) -> str:
-        """
-        Retrieves the commit message for the changes made in the current branch.
-
-        Returns:
-            str: The generated commit message.
-        """
-        with Progress(
-            SpinnerColumn(),
-            TextColumn("{task.description}"),
-            transient=True,
-        ) as progress:
-            diff_output = ""
-            try:
-                progress.add_task(
-                    description="Generating commit message...", total=None
-                )
-
-                # Check diff stats for staged files
-                files = self.get_diff_stats()
-                if not files:
-                    return ""
-
-                # Get diff for each valid staged file
-                for file in files:
-                    diff = subprocess.run(
-                        ["git", "diff", "--cached", file],
-                        capture_output=True,
-                        text=True,
-                    )
-                    diff_output += diff.stdout
-
-            except Exception as e:
-                print_error()
-                return ""
-
-            if diff_output == "":
-                return ""
-
-            # Generate commit message using a LLM
-            client = LLMClient()
-            prompt = self.get_commit_prompt(diff_output, max_chars)
-            response = client.prompt(prompt)
-
-            if response != "":
-                print_success("Commit message generated.")
-
-            return response
-
-    def get_diff_stats(self):
-        """
-        Retrieves the statistics of the changes made to the staged files in the git repository.
-
-        Returns:
-            A list of filenames of the staged files that have changes within the specified limit.
-            Returns None if there are no changes staged to commit or if an error occurs.
-        """
-        try:
-            # Get diff stats for staged files
-            diff_stat = subprocess.run(
-                ["git", "diff", "--cached", "--stat"], capture_output=True, text=True
-            )
-
-            if "error: unknown option `cached'" in diff_stat.stderr:
-                print_error(
-                    "Not a git repository. Please initialize a git repository and try again."
-                )
-                return None
-
-            if diff_stat.returncode == 0:
-                diff_output = diff_stat.stdout
-
-                # Empty diff output means no changes staged to commit
-                if not diff_output:
-                    print_error("No changes staged to commit.")
-                    return None
-            else:
-                return None
-
-            files_within_limit = []
-            max_changes = int(Config().get_option("max_changes"))
-
-            # Parse diff output to get filenames and changes
-            for line in diff_output.splitlines():
-                parts = line.split("|")
-                if len(parts) == 2:
-                    filename = parts[0].strip()
-                    changes = parts[1].strip().split()[0]
-                    if changes.isdigit() and int(changes) <= max_changes:
-                        files_within_limit.append(filename)
-                    else:
-                        print_warning(
-                            f"File {filename} has {changes} changes. Skipping file in LLM summary."
-                        )
-
-            return files_within_limit
-
-        except Exception as e:
-            if "No such file or directory: 'git'" in str(e):
-                print_error("Git is not installed. Please install git and try again.")
-            else:
-                print_error()
-            return None
-
-    def create_commit(self, message):
-        """
-        Creates a new commit with the given message.
-
-        Args:
-            message (str): The commit message.
-        """
-        try:
-            subprocess.run(["git", "commit", "-m", message])
-            print_success("Committed successfully.")
-        except Exception as e:
-            print_error()
diff --git a/pyproject.toml b/pyproject.toml
index 208c4df..861d9cd 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -1,12 +1,12 @@
 
-name = "git-ai"
+name = "gaid"
 version = "0.1.0"
 description = ""
-authors = ["Brennen Ho <git-ai@brennen.dev>"]
+authors = ["Brennen Ho <gaid@brennen.dev>"]
 readme = "README.md"
 
 
-git-ai = "git_ai.main:app"
+gaid = "gaid.main:app"
 
 
 python = "^3.12"


